Numbers and Math

link:
supersimple.dev/projects/amazon

2+2
10-3
10*3
10/2

Syntax for Math

2+2+2
2.2+2.2

10.9*2+20.95

10.9*2+20.95+4.99

// Order of Operations

2+2
2-2
10*3
10/2

+-*/ = operators

1+1*3
1*3 first

muliply / divide done firsst
+ - done after
//(Operator precedence)
If same priority.
Calculate Done from left to Right
USE ()

1+1*3
4
(1+1)*3
6

--Order of Operations
1. (...)
2. * /
3. + -
--

RMB to have full syntax: e.g. (1+1(*3
WRONG
RMB have complete calculation e.g. (1+1*)3
WRONG

Code:
20.95+ 7.99*2

* console will not accept %.
36.93*10%
WRONG  
36.93*0.1

(20.95+ 7.99*2)*0.1

// Weird behavior of Math in Javascript
2,3,4 = intergers
2.2, 2.5 = floating point numbers (floats)

--COMPUTERS have a problem working with FLOATS*** --
e.g.
>0.1+0.2
<0.30000000000000004
??
Reason: how pc stores numbers/
Computers: 0,1 (binary) (deciamls hard to store)
humans: 0,1,2,3,4,54,5,6,7,8

--Computers can't store floats properly--

>20.95+ 7.99
< 28.939999999999998

How to avoid?

Calculate by intergers
(2095+799)/100

//How to round numbers:

Math.round()

(2095 +799)/100

(2095 +799)*0.1/100
>2.894

Math.round((2095 +799)*0.1)/100
>2.89

//Use Google to search new fucntions of js
javascript how to round a number.

//L2 end
Learnt:
numbers and Math
Order of Operations, and Brackets(...)
Calculate the numbers in final projects
Calculateions using flaots can be inaccurate
Math.round()

Ex.
10+3*8+5
(10+3*8+5) *3
18.5+(7.5*2)
(18.5+(7.5*2))/10
(18.5+(7.5*2))/5
(799+2095+1899)/100
(799+2095+1899+499)/100
Math.round((799+2095+1899+499)*0.1)/100
2i. (799+2095+1899+499)/100 + Math.round((799+2095+1899+499)*0.1)/100

2j. Math.floor(2.8) // round down a interger

2k. Math.ceil(2.2)

2l. 25*9/5+32
2m. (86-32)*5/9
2n. -5*9/5+32